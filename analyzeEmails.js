require('dotenv').config();
const fs = require('fs');
const csv = require('csv-parser');

const CSV_FILE_PATH = 'processed/data2.csv';

// Mots-cl√©s pour d√©tecter les erreurs Groq
const GROQ_ERROR_KEYWORDS = [
    'Erreur de g√©n√©ration',
    'Groq',
    'erreur de g√©n√©ration',
    'GROQ',
    'Error generating',
    'API Error',
    'non disponible',
    'indisponible',
    'g√©n√©ration √©chou√©e',
    'failed to generate',
    'timeout',
    'rate limit'
];

// Mots-cl√©s pour d√©tecter des emails g√©n√©riques/mal g√©n√©r√©s
const GENERIC_EMAIL_KEYWORDS = [
    'Voici l\'email',
    'Voici le mail',
    'Email g√©n√©r√©',
    'Mail g√©n√©r√©',
    'Lorem ipsum',
    'Example',
    'Test',
    'TODO',
    'PLACEHOLDER',
    '[Nom]',
    '[Pr√©nom]',
    '[Entreprise]',
    'Cher/Ch√®re',
    'Bonjour [',
    'Hello [',
    'undefined',
    'null',
    'NaN'
];

// Mots-cl√©s pour d√©tecter des erreurs dans le contenu
const CONTENT_ERROR_KEYWORDS = [
    'Je ne peux pas',
    'Je ne suis pas capable',
    'Information non disponible',
    'Donn√©es insuffisantes',
    'Impossible de g√©n√©rer',
    'Erreur dans',
    'Probl√®me avec',
    'Cannot generate',
    'Unable to create',
    'No data available',
    'Je suis d√©sol√©',
    'Malheureusement',
    'Je ne trouve pas',
    'Aucune information'
];

function analyzeEmailContent(emailContent, emailIndex, personName) {
    const issues = [];
    
    if (!emailContent || emailContent.trim() === '') {
        issues.push(`Email ${emailIndex}: Contenu vide`);
        return issues;
    }
    
    const content = emailContent.toLowerCase();
    
    // V√©rifier les erreurs Groq
    GROQ_ERROR_KEYWORDS.forEach(keyword => {
        if (content.includes(keyword.toLowerCase())) {
            issues.push(`Email ${emailIndex}: Erreur Groq d√©tect√©e - "${keyword}"`);
        }
    });
    
    // V√©rifier les emails g√©n√©riques
    GENERIC_EMAIL_KEYWORDS.forEach(keyword => {
        if (content.includes(keyword.toLowerCase())) {
            issues.push(`Email ${emailIndex}: Email g√©n√©rique d√©tect√© - "${keyword}"`);
        }
    });
    
    // V√©rifier les erreurs de contenu
    CONTENT_ERROR_KEYWORDS.forEach(keyword => {
        if (content.includes(keyword.toLowerCase())) {
            issues.push(`Email ${emailIndex}: Erreur de contenu - "${keyword}"`);
        }
    });
    
    // V√©rifier si l'email est trop court (moins de 100 caract√®res)
    if (emailContent.trim().length < 100) {
        issues.push(`Email ${emailIndex}: Email trop court (${emailContent.trim().length} caract√®res)`);
    }
    
    // V√©rifier si l'email contient des placeholders non remplac√©s
    const placeholderPattern = /\{|\}|\[|\]|<<|>>|\{\{|\}\}/;
    if (placeholderPattern.test(emailContent)) {
        issues.push(`Email ${emailIndex}: Placeholders non remplac√©s d√©tect√©s`);
    }
    
    // V√©rifier si l'email ne mentionne pas le nom de la personne
    if (personName && !content.includes(personName.toLowerCase().split(' ')[0])) {
        // Pas critique mais int√©ressant √† noter
        // issues.push(`Email ${emailIndex}: Ne mentionne pas le pr√©nom`);
    }
    
    // V√©rifier les incoh√©rences
    if (content.includes('monsieur') && content.includes('madame')) {
        issues.push(`Email ${emailIndex}: Confusion civilit√© (monsieur ET madame)`);
    }
    
    return issues;
}

function analyzeJobDescription(description) {
    const issues = [];
    
    if (!description || description.trim() === '') {
        issues.push('Description de poste vide');
        return issues;
    }
    
    if (description.toLowerCase().includes('aucune description')) {
        issues.push('Description de poste indisponible');
    }
    
    if (description.trim().length < 30) {
        issues.push(`Description de poste trop courte (${description.trim().length} caract√®res)`);
    }
    
    GROQ_ERROR_KEYWORDS.forEach(keyword => {
        if (description.toLowerCase().includes(keyword.toLowerCase())) {
            issues.push(`Erreur Groq dans description - "${keyword}"`);
        }
    });
    
    return issues;
}

async function analyzeData() {
    console.log('üîç Starting analysis of data2.csv...');
    console.log(`üìÅ File: ${CSV_FILE_PATH}`);
    
    let totalEntries = 0;
    let entriesWithIssues = 0;
    let totalIssues = 0;
    let totalEmails = 0;
    let emailsWithIssues = 0;
    
    const issuesSummary = {
        groqErrors: 0,
        genericEmails: 0,
        contentErrors: 0,
        shortEmails: 0,
        emptyEmails: 0,
        placeholderIssues: 0,
        jobDescriptionIssues: 0,
        civilityConfusion: 0
    };
    
    const detailedIssues = [];
    const companiesWithIssues = new Set();
    const emailLengthStats = [];
    
    console.log('\nüìä Processing entries...');
    
    return new Promise((resolve, reject) => {
        fs.createReadStream(CSV_FILE_PATH)
            .pipe(csv())
            .on('data', (row) => {
                totalEntries++;
                
                const firstName = row['FirstName'] || row['firstName'] || '';
                const lastName = row['LastName'] || row['lastName'] || '';
                const fullName = `${firstName} ${lastName}`.trim();
                const jobDescription = row['LatestJobDescription'] || row['latestJobDescription'] || '';
                
                let entryIssues = [];
                
                // Analyser la description de poste
                const jobIssues = analyzeJobDescription(jobDescription);
                if (jobIssues.length > 0) {
                    entryIssues = entryIssues.concat(jobIssues);
                    issuesSummary.jobDescriptionIssues += jobIssues.length;
                }
                
                // Analyser les emails g√©n√©r√©s (colonnes "Email 1", "Email 2", etc.)
                for (let emailIndex = 1; emailIndex <= 10; emailIndex++) {
                    const emailColumnName = `Email ${emailIndex}`;
                    const emailContent = row[emailColumnName];
                    
                    if (emailContent && emailContent.trim() !== '') {
                        totalEmails++;
                        emailLengthStats.push(emailContent.trim().length);
                        
                        const emailIssues = analyzeEmailContent(emailContent, emailIndex, fullName);
                        if (emailIssues.length > 0) {
                            emailsWithIssues++;
                            entryIssues = entryIssues.concat(emailIssues);
                            
                            // Compter les types d'issues
                            emailIssues.forEach(issue => {
                                if (issue.includes('Erreur Groq')) issuesSummary.groqErrors++;
                                if (issue.includes('g√©n√©rique')) issuesSummary.genericEmails++;
                                if (issue.includes('Erreur de contenu')) issuesSummary.contentErrors++;
                                if (issue.includes('trop court')) issuesSummary.shortEmails++;
                                if (issue.includes('vide')) issuesSummary.emptyEmails++;
                                if (issue.includes('Placeholders')) issuesSummary.placeholderIssues++;
                                if (issue.includes('civilit√©')) issuesSummary.civilityConfusion++;
                            });
                        }
                    }
                }
                
                // Si des issues ont √©t√© trouv√©es pour cette entr√©e
                if (entryIssues.length > 0) {
                    entriesWithIssues++;
                    totalIssues += entryIssues.length;
                    
                    detailedIssues.push({
                        name: fullName,
                        jobTitle: row['JobTitle'] || '',
                        issues: entryIssues
                    });
                }
                
                // Affichage du progr√®s
                if (totalEntries % 100 === 0) {
                    process.stdout.write(`\r   Processed: ${totalEntries} entries...`);
                }
            })
            .on('end', () => {
                console.log(`\r   ‚úÖ Processed: ${totalEntries} entries`);
                
                // Statistiques des emails
                const avgEmailLength = emailLengthStats.length > 0 ? 
                    Math.round(emailLengthStats.reduce((a, b) => a + b, 0) / emailLengthStats.length) : 0;
                const minEmailLength = emailLengthStats.length > 0 ? Math.min(...emailLengthStats) : 0;
                const maxEmailLength = emailLengthStats.length > 0 ? Math.max(...emailLengthStats) : 0;
                
                // Afficher le rapport
                console.log('\nüéØ ANALYSIS RESULTS');
                console.log('==================');
                
                console.log(`\nüìä Overview:`);
                console.log(`   Total entries analyzed: ${totalEntries}`);
                console.log(`   Total emails found: ${totalEmails}`);
                console.log(`   Entries with issues: ${entriesWithIssues} (${((entriesWithIssues/totalEntries)*100).toFixed(1)}%)`);
                console.log(`   Emails with issues: ${emailsWithIssues} (${totalEmails > 0 ? ((emailsWithIssues/totalEmails)*100).toFixed(1) : 0}%)`);
                console.log(`   Total issues found: ${totalIssues}`);
                
                console.log(`\nüìè Email Length Statistics:`);
                console.log(`   Average length: ${avgEmailLength} characters`);
                console.log(`   Shortest email: ${minEmailLength} characters`);
                console.log(`   Longest email: ${maxEmailLength} characters`);
                
                console.log(`\nüö® Issues by category:`);
                console.log(`   ‚îú‚îÄ‚îÄ Groq errors: ${issuesSummary.groqErrors}`);
                console.log(`   ‚îú‚îÄ‚îÄ Generic emails: ${issuesSummary.genericEmails}`);
                console.log(`   ‚îú‚îÄ‚îÄ Content errors: ${issuesSummary.contentErrors}`);
                console.log(`   ‚îú‚îÄ‚îÄ Short emails: ${issuesSummary.shortEmails}`);
                console.log(`   ‚îú‚îÄ‚îÄ Empty emails: ${issuesSummary.emptyEmails}`);
                console.log(`   ‚îú‚îÄ‚îÄ Placeholder issues: ${issuesSummary.placeholderIssues}`);
                console.log(`   ‚îú‚îÄ‚îÄ Civility confusion: ${issuesSummary.civilityConfusion}`);
                console.log(`   ‚îî‚îÄ‚îÄ Job description issues: ${issuesSummary.jobDescriptionIssues}`);
                
                // Afficher quelques exemples d√©taill√©s
                if (detailedIssues.length > 0) {
                    console.log(`\nüîç Sample issues (first 15):`);
                    detailedIssues.slice(0, 15).forEach((entry, index) => {
                        console.log(`\n   ${index + 1}. ${entry.name} - ${entry.jobTitle}`);
                        entry.issues.slice(0, 3).forEach(issue => {
                            console.log(`      ‚ö†Ô∏è  ${issue}`);
                        });
                        if (entry.issues.length > 3) {
                            console.log(`      ... and ${entry.issues.length - 3} more issues`);
                        }
                    });
                }
                
                // Recommandations
                console.log(`\nüí° RECOMMENDATIONS:`);
                if (issuesSummary.groqErrors > 0) {
                    console.log(`   üîß Fix Groq API issues (${issuesSummary.groqErrors} errors found)`);
                }
                if (issuesSummary.genericEmails > 0) {
                    console.log(`   üìù Review email templates (${issuesSummary.genericEmails} generic emails)`);
                }
                if (issuesSummary.shortEmails > 0) {
                    console.log(`   üìè Review short email content (${issuesSummary.shortEmails} short emails)`);
                }
                if (issuesSummary.contentErrors > 0) {
                    console.log(`   üö´ Fix content generation errors (${issuesSummary.contentErrors} content errors)`);
                }
                if (issuesSummary.jobDescriptionIssues > 0) {
                    console.log(`   üìã Fix job description extraction (${issuesSummary.jobDescriptionIssues} issues)`);
                }
                if (totalEmails === 0) {
                    console.log(`   ‚ùå No emails found - check email generation process`);
                }
                
                console.log('\n‚úÖ Analysis completed!');
                resolve();
            })
            .on('error', (error) => {
                console.error('‚ùå Error reading CSV file:', error);
                reject(error);
            });
    });
}

// Lancer l'analyse
analyzeData().catch(error => {
    console.error('Critical error during analysis:', error);
    process.exit(1);
}); 